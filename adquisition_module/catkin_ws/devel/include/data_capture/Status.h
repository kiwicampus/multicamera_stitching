// Generated by gencpp from file data_capture/Status.msg
// DO NOT EDIT!


#ifndef DATA_CAPTURE_MESSAGE_STATUS_H
#define DATA_CAPTURE_MESSAGE_STATUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace data_capture
{
template <class ContainerAllocator>
struct Status_
{
  typedef Status_<ContainerAllocator> Type;

  Status_()
    : recording(false)
    , fps(0.0)
    , space_left(0.0)
    , number_images(0)
    , resolution()
    , quality(0.0)  {
    }
  Status_(const ContainerAllocator& _alloc)
    : recording(false)
    , fps(0.0)
    , space_left(0.0)
    , number_images(0)
    , resolution(_alloc)
    , quality(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _recording_type;
  _recording_type recording;

   typedef float _fps_type;
  _fps_type fps;

   typedef float _space_left_type;
  _space_left_type space_left;

   typedef int32_t _number_images_type;
  _number_images_type number_images;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _resolution_type;
  _resolution_type resolution;

   typedef float _quality_type;
  _quality_type quality;





  typedef boost::shared_ptr< ::data_capture::Status_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::data_capture::Status_<ContainerAllocator> const> ConstPtr;

}; // struct Status_

typedef ::data_capture::Status_<std::allocator<void> > Status;

typedef boost::shared_ptr< ::data_capture::Status > StatusPtr;
typedef boost::shared_ptr< ::data_capture::Status const> StatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::data_capture::Status_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::data_capture::Status_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace data_capture

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg'], 'data_capture': ['/home/overcode/multicamera_stitching/adquisition_module/catkin_ws/src/data_capture/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::data_capture::Status_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::data_capture::Status_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::data_capture::Status_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::data_capture::Status_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::data_capture::Status_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::data_capture::Status_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::data_capture::Status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a2b0fb0d87014489c2b3bdd33a6bb65d";
  }

  static const char* value(const ::data_capture::Status_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa2b0fb0d87014489ULL;
  static const uint64_t static_value2 = 0xc2b3bdd33a6bb65dULL;
};

template<class ContainerAllocator>
struct DataType< ::data_capture::Status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "data_capture/Status";
  }

  static const char* value(const ::data_capture::Status_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::data_capture::Status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool recording\n"
"float32 fps\n"
"float32 space_left\n"
"int32 number_images\n"
"string resolution\n"
"float32 quality\n"
;
  }

  static const char* value(const ::data_capture::Status_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::data_capture::Status_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.recording);
      stream.next(m.fps);
      stream.next(m.space_left);
      stream.next(m.number_images);
      stream.next(m.resolution);
      stream.next(m.quality);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Status_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::data_capture::Status_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::data_capture::Status_<ContainerAllocator>& v)
  {
    s << indent << "recording: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.recording);
    s << indent << "fps: ";
    Printer<float>::stream(s, indent + "  ", v.fps);
    s << indent << "space_left: ";
    Printer<float>::stream(s, indent + "  ", v.space_left);
    s << indent << "number_images: ";
    Printer<int32_t>::stream(s, indent + "  ", v.number_images);
    s << indent << "resolution: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.resolution);
    s << indent << "quality: ";
    Printer<float>::stream(s, indent + "  ", v.quality);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DATA_CAPTURE_MESSAGE_STATUS_H
