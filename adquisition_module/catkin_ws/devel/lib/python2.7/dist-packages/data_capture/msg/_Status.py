# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from data_capture/Status.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Status(genpy.Message):
  _md5sum = "a2b0fb0d87014489c2b3bdd33a6bb65d"
  _type = "data_capture/Status"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool recording
float32 fps
float32 space_left
int32 number_images
string resolution
float32 quality
"""
  __slots__ = ['recording','fps','space_left','number_images','resolution','quality']
  _slot_types = ['bool','float32','float32','int32','string','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       recording,fps,space_left,number_images,resolution,quality

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Status, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.recording is None:
        self.recording = False
      if self.fps is None:
        self.fps = 0.
      if self.space_left is None:
        self.space_left = 0.
      if self.number_images is None:
        self.number_images = 0
      if self.resolution is None:
        self.resolution = ''
      if self.quality is None:
        self.quality = 0.
    else:
      self.recording = False
      self.fps = 0.
      self.space_left = 0.
      self.number_images = 0
      self.resolution = ''
      self.quality = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_B2fi().pack(_x.recording, _x.fps, _x.space_left, _x.number_images))
      _x = self.resolution
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_f().pack(self.quality))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 13
      (_x.recording, _x.fps, _x.space_left, _x.number_images,) = _get_struct_B2fi().unpack(str[start:end])
      self.recording = bool(self.recording)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.resolution = str[start:end].decode('utf-8')
      else:
        self.resolution = str[start:end]
      start = end
      end += 4
      (self.quality,) = _get_struct_f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_B2fi().pack(_x.recording, _x.fps, _x.space_left, _x.number_images))
      _x = self.resolution
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_f().pack(self.quality))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 13
      (_x.recording, _x.fps, _x.space_left, _x.number_images,) = _get_struct_B2fi().unpack(str[start:end])
      self.recording = bool(self.recording)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.resolution = str[start:end].decode('utf-8')
      else:
        self.resolution = str[start:end]
      start = end
      end += 4
      (self.quality,) = _get_struct_f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B2fi = None
def _get_struct_B2fi():
    global _struct_B2fi
    if _struct_B2fi is None:
        _struct_B2fi = struct.Struct("<B2fi")
    return _struct_B2fi
_struct_f = None
def _get_struct_f():
    global _struct_f
    if _struct_f is None:
        _struct_f = struct.Struct("<f")
    return _struct_f
